// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from 'warthog';

// @ts-ignore
import { HistoricalBalance } from "../src/modules/historical-balance/historical-balance.model";
// @ts-ignore
import { Account } from "../src/modules/account/account.model";

export enum HistoricalBalanceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC"
}

registerEnumType(HistoricalBalanceOrderByEnum, {
  name: "HistoricalBalanceOrderByInput"
});

@TypeGraphQLInputType()
export class HistoricalBalanceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  account_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  account_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: BN;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: BN[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: BN;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: BN[];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  account?: AccountWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  AND?: [HistoricalBalanceWhereInput];

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  OR?: [HistoricalBalanceWhereInput];
}

@TypeGraphQLInputType()
export class HistoricalBalanceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class HistoricalBalanceCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField(() => BigInt)
  balance!: BN;

  @TypeGraphQLField(() => BigInt)
  timestamp!: BN;
}

@TypeGraphQLInputType()
export class HistoricalBalanceUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp?: BN;
}

@ArgsType()
export class HistoricalBalanceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  where?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceOrderByEnum, { nullable: true })
  orderBy?: HistoricalBalanceOrderByEnum[];
}

@ArgsType()
export class HistoricalBalanceCreateManyArgs {
  @TypeGraphQLField(() => [HistoricalBalanceCreateInput])
  data!: HistoricalBalanceCreateInput[];
}

@ArgsType()
export class HistoricalBalanceUpdateArgs {
  @TypeGraphQLField() data!: HistoricalBalanceUpdateInput;
  @TypeGraphQLField() where!: HistoricalBalanceWhereUniqueInput;
}

export enum AccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  wallet_ASC = "wallet_ASC",
  wallet_DESC = "wallet_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC"
}

registerEnumType(AccountOrderByEnum, {
  name: "AccountOrderByInput"
});

@TypeGraphQLInputType()
export class AccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  wallet_eq?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_contains?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  wallet_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: BN;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: BN[];

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_none?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_some?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_every?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  AND?: [AccountWhereInput];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  OR?: [AccountWhereInput];
}

@TypeGraphQLInputType()
export class AccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AccountCreateInput {
  @TypeGraphQLField()
  wallet!: string;

  @TypeGraphQLField(() => BigInt)
  balance!: BN;
}

@TypeGraphQLInputType()
export class AccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  wallet?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance?: BN;
}

@ArgsType()
export class AccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  where?: AccountWhereInput;

  @TypeGraphQLField(() => AccountOrderByEnum, { nullable: true })
  orderBy?: AccountOrderByEnum[];
}

@ArgsType()
export class AccountCreateManyArgs {
  @TypeGraphQLField(() => [AccountCreateInput])
  data!: AccountCreateInput[];
}

@ArgsType()
export class AccountUpdateArgs {
  @TypeGraphQLField() data!: AccountUpdateInput;
  @TypeGraphQLField() where!: AccountWhereUniqueInput;
}
